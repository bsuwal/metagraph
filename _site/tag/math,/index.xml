<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Your Title - math,</title>
 <link href="http://example.com/tag/math,/index.xml" rel="self"/>
 <link href="http://example.com/tag/math,.html"/>
 <updated>2018-06-18T08:57:32-04:00</updated>
 <id>http://example.com/tag/math,.html</id>
 <author>
   <name>Author Here</name>
 </author>
 
 <entry>
   <title>GerryCamp Week 2</title>
   <link href="http://example.com/blog/2018/06/vrdi-week-2.html"/>
   <updated>2018-06-18T00:00:00-04:00</updated>
   <id>http://example.com/blog/2018/06/vrdi-week-2</id>
   <content type="html">&lt;p&gt;Okay, the second week of redistricting summer camp is over and &lt;em&gt;a lot&lt;/em&gt; has happened.  Our first week of independent project work has highlighted many of the challenges we will face as researchers over the remaining weeks as well as demonstrated proof-of-concept for several promising new areas to look at.  The research approach is very divide-and-conquer, so we all split into groups to work on various projects, but I tried to keep a proverbial thumb in each of the proverbial pies, so I can quickly recap what I worked on in each of these.&lt;/p&gt;

&lt;h3 id=&quot;network-science&quot;&gt;Network Science&lt;/h3&gt;
&lt;p&gt;This was the group I was officially assigned to.  If you imagine each congressional district as being built out of geographic cells (like towns, precincts, or counties), then you can extract a graph structure from each district by making a vertex for each cell and connecting two vertices with an edge when their cells are adjacent as geographies.  Our goal was to explore some of the properties of these graphs, and we accomplished two major tasks.  First, we actually built these graphs for each state and district in the US.  Given the, umm, difficulty of working with the spatial data from the Census, this wasn’t as simple as we hoped it would be.  Given that last week I promised you some pictures of redistricting in Maine, you can see this graph for the Evergreen State below.  Second, we looked at embedding demographic and social data in these graphs and looking for similarities and clusters beyond spatial adjacency.  Our thoughts are that if two nearby neighborhoods have extremely similar interests, it may make sense to try to put them into the same district, but a graph using only spatial adjacencies cannot capture this information.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img width=&quot;300&quot; src=&quot;../../../assets/images/maine_dual.png?raw=true&quot; /&gt; &lt;br /&gt;

	&lt;font size=&quot;3&quot;&gt; A graph representation of Maine's two congressional districts &lt;/font&gt;
&lt;/p&gt;
&lt;div style=&quot;text-align: right&quot;&gt; &amp;#9724; &lt;/div&gt;

&lt;h3 id=&quot;markov-chain-monte-carlo-rebuild-aka-rundmcmc&quot;&gt;Markov Chain Monte Carlo Rebuild a.k.a. RunDMCMC&lt;/h3&gt;
&lt;p&gt;So there’s this big piece of code made by some researchers which basically takes in a districting plan, makes a bunch of small random changes to it, then spits out the new plan.  If you want your districts to be optimized for something, such as compactness, you can ask the code to only give you new plans which are better than your original in terms of that something.  Pretty cool, right?  Well, the one problem is that the existing code is a single C++ file with 1300 lines of code.  This group worked on rewriting this code in Python to be more readable and useable.  Since the MCMC process requires running for a very large number of small random changes, code performance is incredibly critical, and this was a fun opportunity to review some graph algorithms and learn about some of the Python libraries’ implementations of them.&lt;/p&gt;

&lt;h3 id=&quot;graph-partitions&quot;&gt;Graph Partitions&lt;/h3&gt;
&lt;p&gt;If we envision a state as a graph, then drawing districts is just a graph partitioning problem.  Easy, right?  Well, not really.  There are a lot of really basic questions that we (nor anyone else, as far as we can tell) do not know how to answer.  If I give you a graph, can you tell me how many ways there are to split it into two connected pieces?  If I give you a graph, can you sample uniformly from the set of all cuts which separate it into two connected pieces?  Are either of these problems in some class of computational hardness? If you know, please tell me! Otherwise, these are the big questions we’re thinking about and are hoping to answer soon.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Finally, what’s happening next week?  I’m working with the Spectral Methods group, which is super exciting because learning spectal graph theory is one of my goals for this summer.  In short, spectral approaches look at the eigenvalues of objects and functions, and next week I’ll hopefully feel comfortable enough to write a basic primer to explain how we can use them to work on redistricting.  For now, here’s a little teaser: a picture of Florida, with the districts colored according to the largest eigenvalue of the graph’s adjacency matrix.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img width=&quot;300&quot; src=&quot;../../../assets/images/fl_eval.png?raw=true&quot; /&gt; &lt;br /&gt;

	&lt;font size=&quot;3&quot;&gt; The largest eigenvalue of the adjacency matrix of each of Florida's districts &lt;/font&gt;
&lt;/p&gt;
&lt;div style=&quot;text-align: right&quot;&gt; &amp;#9724; &lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>GerryCamp Week 1</title>
   <link href="http://example.com/blog/2018/06/vrdi-week-1.html"/>
   <updated>2018-06-09T00:00:00-04:00</updated>
   <id>http://example.com/blog/2018/06/vrdi-week-1</id>
   <content type="html">&lt;p&gt;This summer I am working with the &lt;a href=&quot;sites.tufts.edu/mggg&quot;&gt;MGGG&lt;/a&gt; as a Graduate Fellow with the &lt;a href=&quot;gerrydata.org&quot;&gt;Voting Rights Data Institute&lt;/a&gt;, a.k.a. gerrymandering summer camp a.k.a. GerryCamp.  I’m writing these weekly posts both as a way of documenting my work and experience as well as a sort of proof-of-life for my friends and colleagues I (temporarily) abandoned in Philadelphia.&lt;/p&gt;

&lt;p&gt;This week mostly consisted of a battery of talks geared towards getting us all up to speed with the terminology, tools, and techniques used in redistricting as well as getting us familiar with the Boston (well, not &lt;em&gt;in&lt;/em&gt; Boston, but nearby) area, as our working spaces are split among the campuses of Tufts, MIT, and Harvard.  Everyone comes from a wide range of backgrounds, and it’s been a lot of fun helping people learn about topics they may not have seen before.&lt;/p&gt;

&lt;p&gt;There are 52 undergraduate and graduate students at the VRDI, so we are each going to become an expert in an assigned state’s (plus DC and Puerto Rico) electoral and redistricting issues.  I have the great state of Maine, so stay tuned for some more stuff about that.  I think I’m giving a brief talk next week about apportionment in Maine, so maybe I can organize that into a cohesive document with lots of pretty maps and pictures.  Maybe I’ll do a blog post where I vent some of my complaints about how the election data doesn’t line up nicely with the census data…&lt;/p&gt;

&lt;p&gt;Finally, some goals for next week.  A few of us are trying to prove some theorems about projective geometry and graph partitioning, and with some luck we’ll be able to write down some definitive proofs or disproofs of these statements.  One major roadblock on the analytic side of the redistricting problem is that the space of all possible redistrictings (partitions of a map into a given number of equipopulous and contiguous pieces) is really, really, really, really big, and we don’t have a great way to randomly choose some plan in that set.  Something I’d like to do this week is either give a good algorithm to do so or prove that no good algorithm exists.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>An Incorrect Conjecture and a Theorem From Graph Theory</title>
   <link href="http://example.com/blog/2017/12/graph-th-conn-dirgraph.html"/>
   <updated>2017-12-10T00:00:00-05:00</updated>
   <id>http://example.com/blog/2017/12/graph-th-conn-dirgraph</id>
   <content type="html">&lt;p&gt;Last week, I casually asked a few of my colleagues about a little graph theory conjecture I had.  It took me about five minutes to disprove it when I got back to my desk, but interestingly enough something similar to the &lt;em&gt;converse&lt;/em&gt; of the statement &lt;em&gt;is&lt;/em&gt; true (and a stronger version of it, to boot!).  Two of my favorite things about graph theory are that a counterexample to show a statement is false is often easy to cook up, and the proof that a statement is true is often extremely cute, and this fun little adventure illustrates both of them.&lt;/p&gt;

&lt;p&gt;Before we start doing math, we need a few definitions.&lt;/p&gt;

&lt;p&gt;An undirected graph G is &lt;em&gt;connected&lt;/em&gt; if there exists a path between any pair of vertices
A directed graph G is &lt;em&gt;weakly connected&lt;/em&gt; if there exists a path between any pair of vertices &lt;em&gt;which can follow arcs in either direction&lt;/em&gt;.
A directed graph G is &lt;em&gt;strongly connected&lt;/em&gt; if there exists a path between any pair of vertices &lt;em&gt;which only follows arcs in the forward direction&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;in-&lt;/em&gt; and &lt;em&gt;out-&lt;/em&gt; degrees of a vertex in a directed graph is the number of arcs into and out of that vertex, respectively.&lt;/p&gt;

&lt;p&gt;Now, here is my (definitely false) conjecture:&lt;/p&gt;
&lt;div class=&quot;conjecture&quot;&gt;
If a directed graph is strongly connected and every vertex has out-degree k, then every vertex must have in-degree k.
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Disproof&lt;/strong&gt;: Here’s a picture!&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img width=&quot;300&quot; src=&quot;../../../assets/images/12-11-grth/counterex.jpg?raw=true&quot; /&gt; &lt;br /&gt;

	&lt;font size=&quot;3&quot;&gt; A counterexample &lt;/font&gt;
&lt;/p&gt;
&lt;div style=&quot;text-align: right&quot;&gt; &amp;#9724; &lt;/div&gt;

&lt;p&gt;Okay, well, that’s math for you.  Sometimes you come up with problems that are too hard to solve, sometimes you come up with problems that are too easy to solve, and sometimes you come up with silly problems.  Fine.  However, there is a &lt;em&gt;very similar&lt;/em&gt; statement which actually is true.&lt;/p&gt;

&lt;div class=&quot;theorem&quot;&gt;
Theorem: If every vertex in a directed graph has in-degree equal to its out-degree, then it is weakly connected if and only if it is strongly connected.
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Proof:&lt;/strong&gt;
We’ll start by noting that any graph which is strongly connected must also be weakly connected, so that part of the statement isn’t really interesting.  What we need to do some work to show is that if every vertex of G has its in-degree equal to its out-degree and $G$ is weakly connected, then $G$ is also strongly connected.&lt;/p&gt;

&lt;p&gt;We’ll proceed by contradiction.  Suppose that every vertex has in- and out-degree equal to each other and that G is weakly, but &lt;em&gt;not&lt;/em&gt; strongly connected.  Let’s first observe that strong connectivity is an equivalence relation on the vertices of a graph, which we will quickly verify:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reflexivity: any vertex is vacuously strongly connected to itself by the ‘empty’ path.&lt;/li&gt;
  &lt;li&gt;Symmetry: If $u$ and $v$ are strongly connected, then there exists a path following arcs from u to v and from v to u, but this is exactly the same as saying that $v$ and $u$ are strongly connected.&lt;/li&gt;
  &lt;li&gt;Transitivity: If $u$ is strongly connected to $v$ and $v$ is strongly connected to $w$, we  can find a $u$-$w$ path following arcs by just concatenating the $u$-$v$ and $v$-$w$ ones.  Similarly, to get a $w$-$u$ path, we can follow the $w$-$v$ path then the $v$-$u$ path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since this is a proper equivalence relation, it induces a partition on the vertices, and since we’ve assumed that G is not strongly connected, it must partition the vertices into at least two nonempty components.  This graph does not satisfy the requirements we have on in- and out-degrees, but it is weakly, but not strongly, connected, and the partition into strongly connected components is shown.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img width=&quot;300&quot; src=&quot;../../../assets/images/12-11-grth/vertswarcs.jpg?raw=true&quot; /&gt; &lt;br /&gt;

	&lt;font size=&quot;3&quot;&gt; A weakly connected directed graph&lt;/font&gt;
&lt;/p&gt;

&lt;p&gt;Now, let’s make a new graph D with vertices $d_1, d_2, \dots d_m$, one for each chunk of the partition of the vertices of $G$.  $D$ will be a directed graph, and there will be an arc from vertex $d_i$ to $d_j$ if and only if there is some arc in $G$ which goes from a vertex in the chunk corresponding to $d_i$ to one in the chunk corresponding to $d_j$.  Here’s a picture of this construction applied to the graph above.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img width=&quot;300&quot; src=&quot;../../../assets/images/12-11-grth/conncomps.jpg?raw=true &quot; /&gt; &lt;br /&gt;

	&lt;font size=&quot;3&quot;&gt; The transformation applied to the above graph &lt;/font&gt;
&lt;/p&gt;

&lt;p&gt;D has to be connected because $G$ is weakly connected. Also, $D$ cannot have any cycles!  If it did, say $d_i$ and $d_j$ were on some cycle, then we must be able to find a path from any vertex in the $d_i$ chunk of $G$ to one in the $d_j$ chunk &lt;em&gt;and back in the other direction&lt;/em&gt;.  This is because each chunk is strongly connected, so we can make the path by concatenating the path to the ‘exit’ vertex of $d_i$, then the arc out of $d_i$,and so on, until we get to $d_j$, then following a path to the target vertex, and the same for the other direction.  The problem here is that we assumed that we had properly partitioned the vertices into strongly connected components, and this process shows that the $d_i$ chunk and $d_j$ chunk should be the same, but we’ve defined them to be different.&lt;/p&gt;

&lt;p&gt;Okay, so $D$ is a directed graph  with no cycles, so what?  Well, a directed, acyclic graph &lt;em&gt;must&lt;/em&gt; have at least one vertex with in-degree zero.  This vertex, let’s call it $d_1$, presents a problem.  If  its in-degree is zero, its out-degree must be something non-zero, because $D$ is connected and has more than one vertex.  Back up in $G$, this means that there is at least one arc leaving the vertices in the $d_1$ chunk, but none coming in from any other chunks.  This means that the total out-degree of these vertices must be greater than the total in-degree.  But wait!  We assumed that every vertex had in- and out-degree equal, so this situation shouldn’t arise.  Hence we have found our contradiction, and the theorem holds.&lt;/p&gt;
&lt;div style=&quot;text-align: right&quot;&gt; &amp;#9724; &lt;/div&gt;

&lt;p&gt;So what’s the takeaway?  Well, the theorem itself implies that when we are working with directed graphs where every vertex has in-degree equal to its out-degree, we don’t have to worry about a distinction between strong and weak connectedness, and having fewer things to worry about is definitely something we should all want.  This is convinient for studying certain objects in algebraic graph theory, such as graph automorphisms, arc-transitivity, and flows and circulations.&lt;/p&gt;

&lt;p&gt;Also, sometimes when you’re wrong you get to learn a new thing!&lt;/p&gt;

</content>
 </entry>
 
</feed>
